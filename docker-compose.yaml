version: '3.7'

# Settings and configurations that are common for all containers
x-minio-common: &minio-common
  image: quay.io/minio/minio:RELEASE.2022-08-13T21-54-44Z
  command: server --console-address ":9001" http://minio{1...4}/data{1...2}
  expose:
    - "9000"
    - "9001"
  environment:
    MINIO_ROOT_USER: minioadmin
    MINIO_ROOT_PASSWORD: minioadmin
  healthcheck:
    test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
    interval: 30s
    timeout: 20s
    retries: 3

# starts 4 docker containers running minio server instances.
# using nginx reverse proxy, load balancing, you can access
# it through port 9000.
services:
  minio1:
    <<: *minio-common
    hostname: minio1
    volumes:
      - data1-1:/data1
      - data1-2:/data2

  minio2:
    <<: *minio-common
    hostname: minio2
    volumes:
      - data2-1:/data1
      - data2-2:/data2

  minio3:
    <<: *minio-common
    hostname: minio3
    volumes:
      - data3-1:/data1
      - data3-2:/data2

  minio4:
    <<: *minio-common
    hostname: minio4
    volumes:
      - data4-1:/data1
      - data4-2:/data2

  nginx:
    image: nginx:1.19.2-alpine
    hostname: nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "9000:9000"
      - "9001:9001"
    depends_on:
      - minio1
      - minio2
      - minio3
      - minio4
  
  mlflow_db:
    image: postgres:14
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-app}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "15432:5432"

  redis_server:
    image: 'redis:latest'
    ports:
      - "6379:6379"

#   minio:
#     image: minio/minio:RELEASE.2022-10-29T06-21-33Z
#     restart: always
#     volumes:
#       - minio-data:/data
#     environment:
#       MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
#       MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
#     networks:
#       - default
#     ports:
#       - ${MINIO_PORT:-9000}:9000
#       - ${MINIO_CONSOLE_PORT:-9001}:9001
#     healthcheck:
#       test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
#       interval: 30s
#       timeout: 20s
#       retries: 3
#     command: server --console-address ":9001" /data

  mc:
    image: minio/mc:latest
    depends_on:
    - minio
    environment:
      - MINIO_ENDPOINT=${MINIO_ENDPOINT:-minio:9000}
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-minioadmin}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY:-minioclient}
      - MINIO_SECRET_ACCESS_KEY=${MINIO_SECRET_ACCESS_KEY:-minioclient}
      - MINIO_BUCKET=${MINIO_BUCKET:-my-models}
    entrypoint: /bin/bash
    command:
      - -c
      - |
        if ! [[ $$(mc alias list) =~ "myminio" ]]; then
          mc alias set myminio http://minio:9000 $${MINIO_ROOT_USER} $${MINIO_ROOT_PASSWORD}
        fi
        if ! [[ $$(mc admin user list myminio) =~ $${MINIO_ACCESS_KEY} ]]; then
          mc admin user add myminio $${MINIO_ACCESS_KEY} $${MINIO_SECRET_ACCESS_KEY}
          mc admin policy set myminio readwrite user=$${MINIO_ACCESS_KEY}
          # mc admin policy set myminio readonly user=$${MINIO_ACCESS_KEY}
          # mc admin policy set myminio writeonly user=$${MINIO_ACCESS_KEY}
          mc mb myminio/$${MINIO_BUCKET}
        fi
        # while sleep 1000; do :; done
  
  mlflow_server:
    restart: always
    build: 
      context: ./
      dockerfile: ./mlflow/Dockerfile
    image: mlflow_server
    depends_on:
        - mc
        - mlflow_db
    ports:
        - "5000:5000"
    environment:
        - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
        - AWS_ACCESS_KEY_ID=${MINIO_ACCESS_KEY:-minioclient}
        - AWS_SECRET_ACCESS_KEY=${MINIO_SECRET_ACCESS_KEY:-minioclient}
        - POSTGRES_USER=${POSTGRES_USER:-postgres}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
        - POSTGRES_DB=${POSTGRES_DB:-app}
        - MINIO_BUCKET=${MINIO_BUCKET:-my-models}

## By default this config uses default local driver,
## For custom volumes replace with volume driver configuration.
volumes:
  data1-1:
  data1-2:
  data2-1:
  data2-2:
  data3-1:
  data3-2:
  data4-1:
  data4-2:
